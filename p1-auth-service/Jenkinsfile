pipeline {
    agent any
    
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }
    environment {
        imagename = "amolsang/test-puzzles-auth-service"
        dockerImage = ''
    }
    stages {
        stage('Cleanup') {
            steps {
                // Clean before build
                cleanWs()
            }
        }
        stage('Checkout') {
            steps {
                echo "Checking out 'p1-auth' branch"
                git branch: 'p1-auth',
                url: 'https://github.com/airavata-courses/Puzzles.git',
                credentialsId: 'MyGitHub'
            }
        }
        stage('Local Build') {
            steps {
                /* Installing application dependencies */
                echo "Building ${env.JOB_NAME}...."
                dir('p1-auth-service') {
                    sh "pwd"
                    sh 'npm install'
                }
            }
        }
        stage('Unit Test') {
            steps {
                /* Testing the application */
                echo 'Application Testing'
                dir('p1-auth-service') {
                    sh "pwd"
                    sh 'npm test'
                }
            }
        }
        stage('Building docker image') {
            environment {
                EARTHDATA_SECRET = credentials('earthdata_secret')
            }
            steps {
                dir('p1-auth-service') {
                    sh "pwd"
                    script {
                        dockerImage = docker.build imagename
                        // dockerImage = docker.build("${imagename}:${env.BUILD_ID}", "--build-arg EARTHDATA_SECRET=$EARTHDATA_SECRET .")
                    }
                }
            }
        }
         stage('Publish') {
            environment {
                registryCredential = 'amolsang-dockerhub'
            }
            steps{
                script {
                    docker.withRegistry( '', registryCredential ) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
        stage('Remove unused docker image') {
            steps{
                sh "docker rmi $imagename:$BUILD_NUMBER"
                sh "docker rmi $imagename:latest"

            }
        }

        // stage('Deploy App') {
        //     steps {
        //         script {
        //             kubernetesDeploy(configs: "hellowhale.yml", kubeconfigId: "mykubeconfig")
        //         }
        //     }
        // }
        
        // stage('Build') {
        //     agent { dockerfile true }
        //     steps {
        //         sh 'node --version'
        //         sh 'pwd'
        //         sh 'npm test'
        //     }
        // }
    }
}
